package model;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.List;

public class MemberDao {
	public int insert(Member mem) {
		// 연결 객체 생성
		Connection conn = DbConnection.getConnection();
		// 문장을 준비하는 객체
		PreparedStatement pstmt = null;
		String sql = "insert into member" + "(id,pass,name,gender,email,tel,picture)" + "values(?,?,?,?,?,?,?)";
		try {
			// sql 구문을 dbms 에 전달.
			pstmt = conn.prepareStatement(sql);
			pstmt.setString(1, mem.getId());
			pstmt.setString(2, mem.getPass());
			pstmt.setString(3, mem.getName());
			pstmt.setInt(4, mem.getGender());
			pstmt.setString(5, mem.getEmail());
			pstmt.setString(6, mem.getTel());
			pstmt.setString(7, mem.getPicture());
			return pstmt.executeUpdate();
			// executeUpdate -> select 구문을 제외한 sql 구문 실행시 사용
			// 레코드가 변경된 갯수 리턴 -> 1을 반환하게 됨.
		} catch (SQLException e) {
			e.printStackTrace();
		} finally {
			DbConnection.close(conn, pstmt, null);
		}
		return 0;
	}

	public Member selectOne(String id) {
		Connection conn = DbConnection.getConnection();
		String sql = "select * from member where id = ?";
		PreparedStatement pstmt = null;
		ResultSet rs = null;
		try {
			pstmt = conn.prepareStatement(sql);
			pstmt.setString(1, id); // db에 전달할 쿼리문의 ? 값 설정
			rs = pstmt.executeQuery();
			if (rs.next()) {
				Member mem = new Member();
				mem.setId(rs.getString("id"));
				mem.setPass(rs.getString("pass"));
				mem.setGender(rs.getInt("gender"));
				mem.setName(rs.getString("name"));
				mem.setEmail(rs.getString("email"));
				mem.setTel(rs.getString("tel"));
				mem.setPicture(rs.getString("picture"));
				return mem;
			}
		} catch (SQLException e) {
			e.printStackTrace();
		} finally {
			DbConnection.close(conn, pstmt, rs);
		}
		return null;
	}

	public int update(Member mem) {
		// 연결 객체 생성
		Connection conn = DbConnection.getConnection();
		// 문장을 준비하는 객체
		PreparedStatement pstmt = null;
		String sql = "update member set name = ?," + " gender=?,email=?,tel=?,picture=? where id=?";
		try {
			// sql 구문을 dbms 에 전달.
			pstmt = conn.prepareStatement(sql);
			pstmt.setString(1, mem.getName());
			pstmt.setInt(2, mem.getGender());
			pstmt.setString(3, mem.getEmail());
			pstmt.setString(4, mem.getTel());
			pstmt.setString(5, mem.getPicture());
			pstmt.setNString(6, mem.getId());
			return pstmt.executeUpdate();
			// executeUpdate -> select 구문을 제외한 sql 구문 실행시 사용
			// 레코드가 변경된 갯수 리턴 -> 1을 반환하게 됨.
		} catch (SQLException e) {
			e.printStackTrace();
		} finally {
			DbConnection.close(conn, pstmt, null);
		}
		return 0;
	}

	public List<Member> list() {
		List<Member> list = new ArrayList<>();
		Connection conn = DbConnection.getConnection();
		ResultSet rs = null;
		PreparedStatement pstmt = null;
		String sql = "select * from member";
		try {
			pstmt = conn.prepareStatement(sql);
			rs = pstmt.executeQuery();
			while (rs.next()) {
				Member m = new Member();
				m.setId(rs.getString("id"));
				m.setPass(rs.getString("pass"));
				m.setName(rs.getString("name"));
				m.setGender(rs.getInt("gender"));
				m.setTel(rs.getString("tel"));
				m.setEmail(rs.getString("email"));
				m.setPicture(rs.getString("picture"));
				list.add(m);
			}
			return list;
		} catch (SQLException e) {
			e.printStackTrace();
		} finally {
			DbConnection.close(conn, pstmt, null);
		}
		return null;
	}

	public int delete(String string) {
		// 연결 객체 생성
		Connection conn = DbConnection.getConnection();
		// 문장을 준비하는 객체
		PreparedStatement pstmt = null;
		String sql = "delete from member where id = "+string;
		try {
			// sql 구문을 dbms 에 전달.
			
			pstmt = conn.prepareStatement(sql);
			return pstmt.executeUpdate();
			// executeUpdate -> select 구문을 제외한 sql 구문 실행시 사용
			// 레코드가 변경된 갯수 리턴 -> 1을 반환하게 됨.
		} catch (SQLException e) {
			e.printStackTrace();
		} finally {
			DbConnection.close(conn, pstmt, null);
		}
		return 0;
	}

}
