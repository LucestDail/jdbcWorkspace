/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/9.0.39
 * Generated at: 2020-11-17 01:28:44 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp.jdbc;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;
import java.sql.ResultSetMetaData;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.Statement;
import java.sql.DriverManager;
import java.sql.Connection;

public final class jdbcTest_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.HashSet<>();
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = new java.util.HashSet<>();
    _jspx_imports_classes.add("java.sql.Connection");
    _jspx_imports_classes.add("java.sql.ResultSet");
    _jspx_imports_classes.add("java.sql.Statement");
    _jspx_imports_classes.add("java.sql.PreparedStatement");
    _jspx_imports_classes.add("java.sql.ResultSetMetaData");
    _jspx_imports_classes.add("java.sql.DriverManager");
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
      throws java.io.IOException, javax.servlet.ServletException {

    if (!javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      final java.lang.String _jspx_method = request.getMethod();
      if ("OPTIONS".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        return;
      }
      if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSP들은 오직 GET, POST 또는 HEAD 메소드만을 허용합니다. Jasper는 OPTIONS 메소드 또한 허용합니다.");
        return;
      }
    }

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=EUC-KR");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("<!DOCTYPE html>\r\n");
      out.write("<html>\r\n");
      out.write("<head>\r\n");
      out.write("<meta charset=\"EUC-KR\">\r\n");
      out.write("<title>Insert title here</title>\r\n");
      out.write("<link rel=\"stylesheet\" href=\"../css/main.css\" />\r\n");
      out.write("</head>\r\n");
      out.write("<body>\r\n");

	request.setCharacterEncoding("utf-8");
	String sql = request.getParameter("sql"); //null

      out.write('\r');
      out.write('\n');
      out.write("\r\n");
      out.write("<form method = \"post\">\r\n");
      out.write("\t<textarea name = \"sql\">\r\n");
      out.write("\t\t");
      out.print((sql==null) ? ("") : (sql));
      out.write("\r\n");
      out.write("\t</textarea>\r\n");
      out.write("\t<input type=\"submit\" value = \"실행\">\r\n");
      out.write("</form>\r\n");

Connection conn = null;
if(sql != null && !sql.trim().equals("")){
	try{
		//드라이버 설정
		Class.forName("org.mariadb.jdbc.Driver");
		//연결객체(Connection 객체)
		conn = DriverManager.getConnection("jdbc:mariadb://localhost:3306/classdb","root","1234");
		//PreparedStatement : Statement 하위 인터페이스이며 sql 구문을 미리 db 서버에 전송
		PreparedStatement pstmt = conn.prepareStatement(sql);
		//ResultSet rs = pstmt.executeQuery();
		Statement stmt = conn.createStatement();
		ResultSet rs = stmt.executeQuery(sql);
		ResultSetMetaData rsmt = rs.getMetaData();
		PreparedStatement pstmt2 = conn.prepareStatement("select count(*) from (" + sql + ") a");
		ResultSet rs2 = pstmt2.executeQuery();
		rs2.next();
		int cnt = rs2.getInt(1);
		
      out.write("\r\n");
      out.write("\t\t<table>\r\n");
      out.write("\t\t<tr><td colspan = \"");
      out.print(rsmt.getColumnCount());
      out.write("\" style = \"text-align:rigt;\">\r\n");
      out.write("\t\t조회된 레코드 갯수 : ");
      out.print(cnt );
      out.write("</td></tr>\r\n");
      out.write("\t\t<tr>");
      out.write("\r\n");
      out.write("\t\t");
 for(int i = 1; i<= rsmt.getColumnCount(); i++){ 
      out.write("\r\n");
      out.write("\t\t<th>");
      out.print( rsmt.getColumnName(i) );
      out.write("</th>\r\n");
      out.write("\t\t");
} 
      out.write("\r\n");
      out.write("\t\t</tr>\r\n");
      out.write("\t\t");
      out.write("\r\n");
      out.write("\t\t");
 while(rs.next()) { 
      out.write("<tr>\r\n");
      out.write("\t\t");
 for (int i = 1; i <= rsmt.getColumnCount(); i++) { 
      out.write("\r\n");
      out.write("\t\t<td>");
      out.print( rs.getString(i) );
      out.write("</td>");
} 
      out.write("\r\n");
      out.write("\t\t");
} 
      out.write("</tr>\r\n");
      out.write("\t\t</table>\r\n");
      out.write("\t\t");
 } catch(Exception e){ 
      out.write("\r\n");
      out.write("\t\t<h1> sql statement error...</h1>\r\n");
      out.write("\t\t<h2>");
      out.print(e.getMessage() );
      out.write("</h2>\r\n");
      out.write("\t\t<h2> sql statement : ");
      out.print( sql );
      out.write("</h2>\r\n");
      out.write("\t\t");
} finally{
			conn.close();
		}
	}
	
      out.write("\r\n");
      out.write("</body>\r\n");
      out.write("</html>");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
